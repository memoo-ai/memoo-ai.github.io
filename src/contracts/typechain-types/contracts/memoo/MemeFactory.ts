/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace MemeInfoStructs {
  export type MemeInfoStruct = {
    creator: AddressLike;
    defaultAdmin: AddressLike;
    pauser: AddressLike;
    minter: AddressLike;
    name: string;
    symbol: string;
    totalSupply: BigNumberish;
    decimals: BigNumberish;
    payToken: AddressLike;
    idoPrice: BigNumberish;
    airdropPrice: BigNumberish;
    preLaunchSecond: BigNumberish;
    idoUserBuyLimit: BigNumberish;
  };

  export type MemeInfoStructOutput = [
    creator: string,
    defaultAdmin: string,
    pauser: string,
    minter: string,
    name: string,
    symbol: string,
    totalSupply: bigint,
    decimals: bigint,
    payToken: string,
    idoPrice: bigint,
    airdropPrice: bigint,
    preLaunchSecond: bigint,
    idoUserBuyLimit: bigint
  ] & {
    creator: string;
    defaultAdmin: string;
    pauser: string;
    minter: string;
    name: string;
    symbol: string;
    totalSupply: bigint;
    decimals: bigint;
    payToken: string;
    idoPrice: bigint;
    airdropPrice: bigint;
    preLaunchSecond: bigint;
    idoUserBuyLimit: bigint;
  };

  export type MemeConfigInfoStruct = {
    memeInfo: MemeInfoStructs.MemeInfoStruct;
    memooConfig: MemooManageStructs.MemooConfigStruct;
    creatorTotal: BigNumberish;
    platformTotal: BigNumberish;
    memeCreateTimestamp: BigNumberish;
  };

  export type MemeConfigInfoStructOutput = [
    memeInfo: MemeInfoStructs.MemeInfoStructOutput,
    memooConfig: MemooManageStructs.MemooConfigStructOutput,
    creatorTotal: bigint,
    platformTotal: bigint,
    memeCreateTimestamp: bigint
  ] & {
    memeInfo: MemeInfoStructs.MemeInfoStructOutput;
    memooConfig: MemooManageStructs.MemooConfigStructOutput;
    creatorTotal: bigint;
    platformTotal: bigint;
    memeCreateTimestamp: bigint;
  };
}

export declare namespace MemooManageStructs {
  export type TokenAllocationStruct = {
    creator: BigNumberish;
    ido: BigNumberish;
    lp: BigNumberish;
    airdrop: BigNumberish;
    platform: BigNumberish;
  };

  export type TokenAllocationStructOutput = [
    creator: bigint,
    ido: bigint,
    lp: bigint,
    airdrop: bigint,
    platform: bigint
  ] & {
    creator: bigint;
    ido: bigint;
    lp: bigint;
    airdrop: bigint;
    platform: bigint;
  };

  export type MemooConfigStruct = {
    memeFactory: AddressLike;
    treasury: AddressLike;
    memeWhitelist: AddressLike;
    uniswapV2Factory: AddressLike;
    uniswapV2Router02: AddressLike;
    uniswapDeadline: BigNumberish;
    liquidityHolder: AddressLike;
    liquidityLocker: AddressLike;
    platformMemeRecipient: AddressLike;
    platformFeeRecipient: AddressLike;
    platformFeeRateIdo: BigNumberish;
    platformFeeRateDenominatorIdo: BigNumberish;
    platformFeeCreateMeme: BigNumberish;
    platformFeeCreateMemePayToken: AddressLike;
    idoCreatorBuyLimit: BigNumberish;
    allocation: MemooManageStructs.TokenAllocationStruct;
  };

  export type MemooConfigStructOutput = [
    memeFactory: string,
    treasury: string,
    memeWhitelist: string,
    uniswapV2Factory: string,
    uniswapV2Router02: string,
    uniswapDeadline: bigint,
    liquidityHolder: string,
    liquidityLocker: string,
    platformMemeRecipient: string,
    platformFeeRecipient: string,
    platformFeeRateIdo: bigint,
    platformFeeRateDenominatorIdo: bigint,
    platformFeeCreateMeme: bigint,
    platformFeeCreateMemePayToken: string,
    idoCreatorBuyLimit: bigint,
    allocation: MemooManageStructs.TokenAllocationStructOutput
  ] & {
    memeFactory: string;
    treasury: string;
    memeWhitelist: string;
    uniswapV2Factory: string;
    uniswapV2Router02: string;
    uniswapDeadline: bigint;
    liquidityHolder: string;
    liquidityLocker: string;
    platformMemeRecipient: string;
    platformFeeRecipient: string;
    platformFeeRateIdo: bigint;
    platformFeeRateDenominatorIdo: bigint;
    platformFeeCreateMeme: bigint;
    platformFeeCreateMemePayToken: string;
    idoCreatorBuyLimit: bigint;
    allocation: MemooManageStructs.TokenAllocationStructOutput;
  };
}

export interface MemeFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "MEMOO_MANAGE_ROLE"
      | "PAUSER_ROLE"
      | "PERCENT_DENOMINATOR"
      | "claimToken"
      | "createMeme"
      | "getMemeAddress"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "memeConfigInfo"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimToken"
      | "Initialized"
      | "MemeCreated"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MEMOO_MANAGE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimToken",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMeme",
    values: [
      MemeInfoStructs.MemeInfoStruct,
      MemooManageStructs.MemooConfigStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMemeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "memeConfigInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MEMOO_MANAGE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createMeme", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMemeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "memeConfigInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace ClaimTokenEvent {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    count: BigNumberish
  ];
  export type OutputTuple = [token: string, to: string, count: bigint];
  export interface OutputObject {
    token: string;
    to: string;
    count: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemeCreatedEvent {
  export type InputTuple = [
    meme: AddressLike,
    memeConfigInfo: MemeInfoStructs.MemeConfigInfoStruct
  ];
  export type OutputTuple = [
    meme: string,
    memeConfigInfo: MemeInfoStructs.MemeConfigInfoStructOutput
  ];
  export interface OutputObject {
    meme: string;
    memeConfigInfo: MemeInfoStructs.MemeConfigInfoStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MemeFactory extends BaseContract {
  connect(runner?: ContractRunner | null): MemeFactory;
  waitForDeployment(): Promise<this>;

  interface: MemeFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MEMOO_MANAGE_ROLE: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  PERCENT_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  claimToken: TypedContractMethod<
    [token: AddressLike, to: AddressLike, count: BigNumberish],
    [void],
    "nonpayable"
  >;

  createMeme: TypedContractMethod<
    [
      memeInfo: MemeInfoStructs.MemeInfoStruct,
      memooConfig: MemooManageStructs.MemooConfigStruct
    ],
    [[string, MemeInfoStructs.MemeConfigInfoStructOutput]],
    "nonpayable"
  >;

  getMemeAddress: TypedContractMethod<[memeKey: string], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [defaultAdmin: AddressLike, pauser: AddressLike, memooManage: AddressLike],
    [void],
    "nonpayable"
  >;

  memeConfigInfo: TypedContractMethod<
    [meme: AddressLike],
    [MemeInfoStructs.MemeConfigInfoStructOutput],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MEMOO_MANAGE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PERCENT_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimToken"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, count: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createMeme"
  ): TypedContractMethod<
    [
      memeInfo: MemeInfoStructs.MemeInfoStruct,
      memooConfig: MemooManageStructs.MemooConfigStruct
    ],
    [[string, MemeInfoStructs.MemeConfigInfoStructOutput]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getMemeAddress"
  ): TypedContractMethod<[memeKey: string], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [defaultAdmin: AddressLike, pauser: AddressLike, memooManage: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "memeConfigInfo"
  ): TypedContractMethod<
    [meme: AddressLike],
    [MemeInfoStructs.MemeConfigInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ClaimToken"
  ): TypedContractEvent<
    ClaimTokenEvent.InputTuple,
    ClaimTokenEvent.OutputTuple,
    ClaimTokenEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MemeCreated"
  ): TypedContractEvent<
    MemeCreatedEvent.InputTuple,
    MemeCreatedEvent.OutputTuple,
    MemeCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ClaimToken(address,address,uint256)": TypedContractEvent<
      ClaimTokenEvent.InputTuple,
      ClaimTokenEvent.OutputTuple,
      ClaimTokenEvent.OutputObject
    >;
    ClaimToken: TypedContractEvent<
      ClaimTokenEvent.InputTuple,
      ClaimTokenEvent.OutputTuple,
      ClaimTokenEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MemeCreated(address,tuple)": TypedContractEvent<
      MemeCreatedEvent.InputTuple,
      MemeCreatedEvent.OutputTuple,
      MemeCreatedEvent.OutputObject
    >;
    MemeCreated: TypedContractEvent<
      MemeCreatedEvent.InputTuple,
      MemeCreatedEvent.OutputTuple,
      MemeCreatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
