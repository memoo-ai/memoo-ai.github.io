/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace MemooManageStructs {
  export type MemeConfigStruct = {
    payToken: AddressLike;
    idoPrice: BigNumberish;
    airdropPrice: BigNumberish;
    totalSupply: BigNumberish;
    defaultDecimals: BigNumberish;
    idoUserBuyLimit: BigNumberish;
  };

  export type MemeConfigStructOutput = [
    payToken: string,
    idoPrice: bigint,
    airdropPrice: bigint,
    totalSupply: bigint,
    defaultDecimals: bigint,
    idoUserBuyLimit: bigint
  ] & {
    payToken: string;
    idoPrice: bigint;
    airdropPrice: bigint;
    totalSupply: bigint;
    defaultDecimals: bigint;
    idoUserBuyLimit: bigint;
  };

  export type TokenAllocationStruct = {
    creator: BigNumberish;
    ido: BigNumberish;
    lp: BigNumberish;
    airdrop: BigNumberish;
    platform: BigNumberish;
  };

  export type TokenAllocationStructOutput = [
    creator: bigint,
    ido: bigint,
    lp: bigint,
    airdrop: bigint,
    platform: bigint
  ] & {
    creator: bigint;
    ido: bigint;
    lp: bigint;
    airdrop: bigint;
    platform: bigint;
  };

  export type MemooConfigStruct = {
    memeFactory: AddressLike;
    treasury: AddressLike;
    memeWhitelist: AddressLike;
    uniswapV2Factory: AddressLike;
    uniswapV2Router02: AddressLike;
    uniswapDeadline: BigNumberish;
    liquidityHolder: AddressLike;
    liquidityLocker: AddressLike;
    platformMemeRecipient: AddressLike;
    platformFeeRecipient: AddressLike;
    platformFeeRateIdo: BigNumberish;
    platformFeeRateDenominatorIdo: BigNumberish;
    platformFeeCreateMeme: BigNumberish;
    platformFeeCreateMemePayToken: AddressLike;
    idoCreatorBuyLimit: BigNumberish;
    allocation: MemooManageStructs.TokenAllocationStruct;
  };

  export type MemooConfigStructOutput = [
    memeFactory: string,
    treasury: string,
    memeWhitelist: string,
    uniswapV2Factory: string,
    uniswapV2Router02: string,
    uniswapDeadline: bigint,
    liquidityHolder: string,
    liquidityLocker: string,
    platformMemeRecipient: string,
    platformFeeRecipient: string,
    platformFeeRateIdo: bigint,
    platformFeeRateDenominatorIdo: bigint,
    platformFeeCreateMeme: bigint,
    platformFeeCreateMemePayToken: string,
    idoCreatorBuyLimit: bigint,
    allocation: MemooManageStructs.TokenAllocationStructOutput
  ] & {
    memeFactory: string;
    treasury: string;
    memeWhitelist: string;
    uniswapV2Factory: string;
    uniswapV2Router02: string;
    uniswapDeadline: bigint;
    liquidityHolder: string;
    liquidityLocker: string;
    platformMemeRecipient: string;
    platformFeeRecipient: string;
    platformFeeRateIdo: bigint;
    platformFeeRateDenominatorIdo: bigint;
    platformFeeCreateMeme: bigint;
    platformFeeCreateMemePayToken: string;
    idoCreatorBuyLimit: bigint;
    allocation: MemooManageStructs.TokenAllocationStructOutput;
  };

  export type UnlockPeriodStruct = {
    index: BigNumberish;
    periodType: string;
    value: BigNumberish;
    unlockRate: BigNumberish;
  };

  export type UnlockPeriodStructOutput = [
    index: bigint,
    periodType: string,
    value: bigint,
    unlockRate: bigint
  ] & { index: bigint; periodType: string; value: bigint; unlockRate: bigint };
}

export declare namespace MemeInfoStructs {
  export type MemeInfoStruct = {
    creator: AddressLike;
    defaultAdmin: AddressLike;
    pauser: AddressLike;
    minter: AddressLike;
    name: string;
    symbol: string;
    totalSupply: BigNumberish;
    decimals: BigNumberish;
    payToken: AddressLike;
    idoPrice: BigNumberish;
    airdropPrice: BigNumberish;
    preLaunchSecond: BigNumberish;
    idoUserBuyLimit: BigNumberish;
  };

  export type MemeInfoStructOutput = [
    creator: string,
    defaultAdmin: string,
    pauser: string,
    minter: string,
    name: string,
    symbol: string,
    totalSupply: bigint,
    decimals: bigint,
    payToken: string,
    idoPrice: bigint,
    airdropPrice: bigint,
    preLaunchSecond: bigint,
    idoUserBuyLimit: bigint
  ] & {
    creator: string;
    defaultAdmin: string;
    pauser: string;
    minter: string;
    name: string;
    symbol: string;
    totalSupply: bigint;
    decimals: bigint;
    payToken: string;
    idoPrice: bigint;
    airdropPrice: bigint;
    preLaunchSecond: bigint;
    idoUserBuyLimit: bigint;
  };

  export type MemeConfigInfoStruct = {
    memeInfo: MemeInfoStructs.MemeInfoStruct;
    memooConfig: MemooManageStructs.MemooConfigStruct;
    creatorTotal: BigNumberish;
    platformTotal: BigNumberish;
    memeCreateTimestamp: BigNumberish;
  };

  export type MemeConfigInfoStructOutput = [
    memeInfo: MemeInfoStructs.MemeInfoStructOutput,
    memooConfig: MemooManageStructs.MemooConfigStructOutput,
    creatorTotal: bigint,
    platformTotal: bigint,
    memeCreateTimestamp: bigint
  ] & {
    memeInfo: MemeInfoStructs.MemeInfoStructOutput;
    memooConfig: MemooManageStructs.MemooConfigStructOutput;
    creatorTotal: bigint;
    platformTotal: bigint;
    memeCreateTimestamp: bigint;
  };

  export type MemeInfoParamsStruct = {
    name: string;
    symbol: string;
    preLaunchSecond: BigNumberish;
  };

  export type MemeInfoParamsStructOutput = [
    name: string,
    symbol: string,
    preLaunchSecond: bigint
  ] & { name: string; symbol: string; preLaunchSecond: bigint };
}

export interface MemooManageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "PAUSER_ROLE"
      | "PERCENT_DENOMINATOR"
      | "PLATFORM_ROLE"
      | "airdropClaim"
      | "claimToken"
      | "createMeme"
      | "getCanUnlockCount"
      | "getMemooConfig"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "idoBuy"
      | "idoEnd"
      | "initialize"
      | "memeDefaultConfig"
      | "memeUnlockPeriods"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "setMemeDefaultConfig"
      | "setMemooConfig"
      | "setUnlockPeriod"
      | "supportsInterface"
      | "unlockMeme"
      | "unlockPriceReached"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AirdropClaimed"
      | "ClaimToken"
      | "Initialized"
      | "MemeConfigured"
      | "MemeCreated"
      | "MemeIdoBought"
      | "MemeIdoEnded"
      | "MemeUnlocked"
      | "MemooConfigured"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SetUnlockPeriod"
      | "UnlockPriceReached"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLATFORM_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airdropClaim",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimToken",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMeme",
    values: [MemeInfoStructs.MemeInfoParamsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCanUnlockCount",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMemooConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "idoBuy",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "idoEnd", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "memeDefaultConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "memeUnlockPeriods",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMemeDefaultConfig",
    values: [MemooManageStructs.MemeConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setMemooConfig",
    values: [MemooManageStructs.MemooConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnlockPeriod",
    values: [MemooManageStructs.UnlockPeriodStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockMeme",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockPriceReached",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PLATFORM_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createMeme", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCanUnlockCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemooConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "idoBuy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "idoEnd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "memeDefaultConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memeUnlockPeriods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMemeDefaultConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMemooConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnlockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockMeme", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockPriceReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace AirdropClaimedEvent {
  export type InputTuple = [
    meme: AddressLike,
    user: AddressLike,
    count: BigNumberish
  ];
  export type OutputTuple = [meme: string, user: string, count: bigint];
  export interface OutputObject {
    meme: string;
    user: string;
    count: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimTokenEvent {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    count: BigNumberish
  ];
  export type OutputTuple = [token: string, to: string, count: bigint];
  export interface OutputObject {
    token: string;
    to: string;
    count: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemeConfiguredEvent {
  export type InputTuple = [memeConfig: MemooManageStructs.MemeConfigStruct];
  export type OutputTuple = [
    memeConfig: MemooManageStructs.MemeConfigStructOutput
  ];
  export interface OutputObject {
    memeConfig: MemooManageStructs.MemeConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemeCreatedEvent {
  export type InputTuple = [
    meme: AddressLike,
    memeConfigInfo: MemeInfoStructs.MemeConfigInfoStruct
  ];
  export type OutputTuple = [
    meme: string,
    memeConfigInfo: MemeInfoStructs.MemeConfigInfoStructOutput
  ];
  export interface OutputObject {
    meme: string;
    memeConfigInfo: MemeInfoStructs.MemeConfigInfoStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemeIdoBoughtEvent {
  export type InputTuple = [
    meme: AddressLike,
    user: AddressLike,
    amount: BigNumberish,
    count: BigNumberish
  ];
  export type OutputTuple = [
    meme: string,
    user: string,
    amount: bigint,
    count: bigint
  ];
  export interface OutputObject {
    meme: string;
    user: string;
    amount: bigint;
    count: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemeIdoEndedEvent {
  export type InputTuple = [
    meme: AddressLike,
    pair: AddressLike,
    tokenB: AddressLike,
    amountMeme: BigNumberish,
    amountTokenB: BigNumberish
  ];
  export type OutputTuple = [
    meme: string,
    pair: string,
    tokenB: string,
    amountMeme: bigint,
    amountTokenB: bigint
  ];
  export interface OutputObject {
    meme: string;
    pair: string;
    tokenB: string;
    amountMeme: bigint;
    amountTokenB: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemeUnlockedEvent {
  export type InputTuple = [
    meme: AddressLike,
    user: AddressLike,
    index: BigNumberish,
    periodType: string,
    count: BigNumberish
  ];
  export type OutputTuple = [
    meme: string,
    user: string,
    index: bigint,
    periodType: string,
    count: bigint
  ];
  export interface OutputObject {
    meme: string;
    user: string;
    index: bigint;
    periodType: string;
    count: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemooConfiguredEvent {
  export type InputTuple = [memooConfig: MemooManageStructs.MemooConfigStruct];
  export type OutputTuple = [
    memooConfig: MemooManageStructs.MemooConfigStructOutput
  ];
  export interface OutputObject {
    memooConfig: MemooManageStructs.MemooConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetUnlockPeriodEvent {
  export type InputTuple = [
    unlockPeriods: MemooManageStructs.UnlockPeriodStruct[]
  ];
  export type OutputTuple = [
    unlockPeriods: MemooManageStructs.UnlockPeriodStructOutput[]
  ];
  export interface OutputObject {
    unlockPeriods: MemooManageStructs.UnlockPeriodStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnlockPriceReachedEvent {
  export type InputTuple = [
    meme: AddressLike,
    index: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [meme: string, index: bigint, timestamp: bigint];
  export interface OutputObject {
    meme: string;
    index: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MemooManage extends BaseContract {
  connect(runner?: ContractRunner | null): MemooManage;
  waitForDeployment(): Promise<this>;

  interface: MemooManageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  PERCENT_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  PLATFORM_ROLE: TypedContractMethod<[], [string], "view">;

  airdropClaim: TypedContractMethod<
    [
      meme: AddressLike,
      claimCount: BigNumberish,
      amount: BigNumberish,
      message: BytesLike,
      signature: BytesLike
    ],
    [void],
    "payable"
  >;

  claimToken: TypedContractMethod<
    [token: AddressLike, to: AddressLike, count: BigNumberish],
    [void],
    "nonpayable"
  >;

  createMeme: TypedContractMethod<
    [
      memeInfoParams: MemeInfoStructs.MemeInfoParamsStruct,
      amount: BigNumberish
    ],
    [void],
    "payable"
  >;

  getCanUnlockCount: TypedContractMethod<
    [meme: AddressLike, user: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  getMemooConfig: TypedContractMethod<
    [],
    [MemooManageStructs.MemooConfigStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  idoBuy: TypedContractMethod<
    [meme: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  idoEnd: TypedContractMethod<[meme: AddressLike], [void], "nonpayable">;

  initialize: TypedContractMethod<
    [defaultAdmin: AddressLike, pauser: AddressLike, platform: AddressLike],
    [void],
    "nonpayable"
  >;

  memeDefaultConfig: TypedContractMethod<
    [],
    [
      [string, bigint, bigint, bigint, bigint, bigint] & {
        payToken: string;
        idoPrice: bigint;
        airdropPrice: bigint;
        totalSupply: bigint;
        defaultDecimals: bigint;
        idoUserBuyLimit: bigint;
      }
    ],
    "view"
  >;

  memeUnlockPeriods: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        index: bigint;
        periodType: string;
        value: bigint;
        unlockRate: bigint;
      }
    ],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setMemeDefaultConfig: TypedContractMethod<
    [_memeConfig: MemooManageStructs.MemeConfigStruct],
    [void],
    "nonpayable"
  >;

  setMemooConfig: TypedContractMethod<
    [_memooConfig: MemooManageStructs.MemooConfigStruct],
    [void],
    "nonpayable"
  >;

  setUnlockPeriod: TypedContractMethod<
    [p: MemooManageStructs.UnlockPeriodStruct[]],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unlockMeme: TypedContractMethod<
    [meme: AddressLike, index: BigNumberish],
    [void],
    "nonpayable"
  >;

  unlockPriceReached: TypedContractMethod<
    [meme: AddressLike, index: BigNumberish, timestamp: BigNumberish],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PERCENT_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PLATFORM_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "airdropClaim"
  ): TypedContractMethod<
    [
      meme: AddressLike,
      claimCount: BigNumberish,
      amount: BigNumberish,
      message: BytesLike,
      signature: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "claimToken"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, count: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createMeme"
  ): TypedContractMethod<
    [
      memeInfoParams: MemeInfoStructs.MemeInfoParamsStruct,
      amount: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getCanUnlockCount"
  ): TypedContractMethod<
    [meme: AddressLike, user: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMemooConfig"
  ): TypedContractMethod<
    [],
    [MemooManageStructs.MemooConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "idoBuy"
  ): TypedContractMethod<
    [meme: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "idoEnd"
  ): TypedContractMethod<[meme: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [defaultAdmin: AddressLike, pauser: AddressLike, platform: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "memeDefaultConfig"
  ): TypedContractMethod<
    [],
    [
      [string, bigint, bigint, bigint, bigint, bigint] & {
        payToken: string;
        idoPrice: bigint;
        airdropPrice: bigint;
        totalSupply: bigint;
        defaultDecimals: bigint;
        idoUserBuyLimit: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "memeUnlockPeriods"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        index: bigint;
        periodType: string;
        value: bigint;
        unlockRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMemeDefaultConfig"
  ): TypedContractMethod<
    [_memeConfig: MemooManageStructs.MemeConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMemooConfig"
  ): TypedContractMethod<
    [_memooConfig: MemooManageStructs.MemooConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUnlockPeriod"
  ): TypedContractMethod<
    [p: MemooManageStructs.UnlockPeriodStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unlockMeme"
  ): TypedContractMethod<
    [meme: AddressLike, index: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlockPriceReached"
  ): TypedContractMethod<
    [meme: AddressLike, index: BigNumberish, timestamp: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AirdropClaimed"
  ): TypedContractEvent<
    AirdropClaimedEvent.InputTuple,
    AirdropClaimedEvent.OutputTuple,
    AirdropClaimedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimToken"
  ): TypedContractEvent<
    ClaimTokenEvent.InputTuple,
    ClaimTokenEvent.OutputTuple,
    ClaimTokenEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MemeConfigured"
  ): TypedContractEvent<
    MemeConfiguredEvent.InputTuple,
    MemeConfiguredEvent.OutputTuple,
    MemeConfiguredEvent.OutputObject
  >;
  getEvent(
    key: "MemeCreated"
  ): TypedContractEvent<
    MemeCreatedEvent.InputTuple,
    MemeCreatedEvent.OutputTuple,
    MemeCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MemeIdoBought"
  ): TypedContractEvent<
    MemeIdoBoughtEvent.InputTuple,
    MemeIdoBoughtEvent.OutputTuple,
    MemeIdoBoughtEvent.OutputObject
  >;
  getEvent(
    key: "MemeIdoEnded"
  ): TypedContractEvent<
    MemeIdoEndedEvent.InputTuple,
    MemeIdoEndedEvent.OutputTuple,
    MemeIdoEndedEvent.OutputObject
  >;
  getEvent(
    key: "MemeUnlocked"
  ): TypedContractEvent<
    MemeUnlockedEvent.InputTuple,
    MemeUnlockedEvent.OutputTuple,
    MemeUnlockedEvent.OutputObject
  >;
  getEvent(
    key: "MemooConfigured"
  ): TypedContractEvent<
    MemooConfiguredEvent.InputTuple,
    MemooConfiguredEvent.OutputTuple,
    MemooConfiguredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SetUnlockPeriod"
  ): TypedContractEvent<
    SetUnlockPeriodEvent.InputTuple,
    SetUnlockPeriodEvent.OutputTuple,
    SetUnlockPeriodEvent.OutputObject
  >;
  getEvent(
    key: "UnlockPriceReached"
  ): TypedContractEvent<
    UnlockPriceReachedEvent.InputTuple,
    UnlockPriceReachedEvent.OutputTuple,
    UnlockPriceReachedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AirdropClaimed(address,address,uint256)": TypedContractEvent<
      AirdropClaimedEvent.InputTuple,
      AirdropClaimedEvent.OutputTuple,
      AirdropClaimedEvent.OutputObject
    >;
    AirdropClaimed: TypedContractEvent<
      AirdropClaimedEvent.InputTuple,
      AirdropClaimedEvent.OutputTuple,
      AirdropClaimedEvent.OutputObject
    >;

    "ClaimToken(address,address,uint256)": TypedContractEvent<
      ClaimTokenEvent.InputTuple,
      ClaimTokenEvent.OutputTuple,
      ClaimTokenEvent.OutputObject
    >;
    ClaimToken: TypedContractEvent<
      ClaimTokenEvent.InputTuple,
      ClaimTokenEvent.OutputTuple,
      ClaimTokenEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MemeConfigured(tuple)": TypedContractEvent<
      MemeConfiguredEvent.InputTuple,
      MemeConfiguredEvent.OutputTuple,
      MemeConfiguredEvent.OutputObject
    >;
    MemeConfigured: TypedContractEvent<
      MemeConfiguredEvent.InputTuple,
      MemeConfiguredEvent.OutputTuple,
      MemeConfiguredEvent.OutputObject
    >;

    "MemeCreated(address,tuple)": TypedContractEvent<
      MemeCreatedEvent.InputTuple,
      MemeCreatedEvent.OutputTuple,
      MemeCreatedEvent.OutputObject
    >;
    MemeCreated: TypedContractEvent<
      MemeCreatedEvent.InputTuple,
      MemeCreatedEvent.OutputTuple,
      MemeCreatedEvent.OutputObject
    >;

    "MemeIdoBought(address,address,uint256,uint256)": TypedContractEvent<
      MemeIdoBoughtEvent.InputTuple,
      MemeIdoBoughtEvent.OutputTuple,
      MemeIdoBoughtEvent.OutputObject
    >;
    MemeIdoBought: TypedContractEvent<
      MemeIdoBoughtEvent.InputTuple,
      MemeIdoBoughtEvent.OutputTuple,
      MemeIdoBoughtEvent.OutputObject
    >;

    "MemeIdoEnded(address,address,address,uint256,uint256)": TypedContractEvent<
      MemeIdoEndedEvent.InputTuple,
      MemeIdoEndedEvent.OutputTuple,
      MemeIdoEndedEvent.OutputObject
    >;
    MemeIdoEnded: TypedContractEvent<
      MemeIdoEndedEvent.InputTuple,
      MemeIdoEndedEvent.OutputTuple,
      MemeIdoEndedEvent.OutputObject
    >;

    "MemeUnlocked(address,address,uint256,string,uint256)": TypedContractEvent<
      MemeUnlockedEvent.InputTuple,
      MemeUnlockedEvent.OutputTuple,
      MemeUnlockedEvent.OutputObject
    >;
    MemeUnlocked: TypedContractEvent<
      MemeUnlockedEvent.InputTuple,
      MemeUnlockedEvent.OutputTuple,
      MemeUnlockedEvent.OutputObject
    >;

    "MemooConfigured(tuple)": TypedContractEvent<
      MemooConfiguredEvent.InputTuple,
      MemooConfiguredEvent.OutputTuple,
      MemooConfiguredEvent.OutputObject
    >;
    MemooConfigured: TypedContractEvent<
      MemooConfiguredEvent.InputTuple,
      MemooConfiguredEvent.OutputTuple,
      MemooConfiguredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SetUnlockPeriod(tuple[6])": TypedContractEvent<
      SetUnlockPeriodEvent.InputTuple,
      SetUnlockPeriodEvent.OutputTuple,
      SetUnlockPeriodEvent.OutputObject
    >;
    SetUnlockPeriod: TypedContractEvent<
      SetUnlockPeriodEvent.InputTuple,
      SetUnlockPeriodEvent.OutputTuple,
      SetUnlockPeriodEvent.OutputObject
    >;

    "UnlockPriceReached(address,uint256,uint256)": TypedContractEvent<
      UnlockPriceReachedEvent.InputTuple,
      UnlockPriceReachedEvent.OutputTuple,
      UnlockPriceReachedEvent.OutputObject
    >;
    UnlockPriceReached: TypedContractEvent<
      UnlockPriceReachedEvent.InputTuple,
      UnlockPriceReachedEvent.OutputTuple,
      UnlockPriceReachedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
