/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ExampleSlidingWindowOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "consult"
      | "factory"
      | "granularity"
      | "observationIndexOf"
      | "pairObservations"
      | "periodSize"
      | "update"
      | "windowSize"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "consult",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "granularity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "observationIndexOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pairObservations",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "periodSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "windowSize",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "consult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "granularity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "observationIndexOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairObservations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "periodSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "windowSize", data: BytesLike): Result;
}

export interface ExampleSlidingWindowOracle extends BaseContract {
  connect(runner?: ContractRunner | null): ExampleSlidingWindowOracle;
  waitForDeployment(): Promise<this>;

  interface: ExampleSlidingWindowOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  consult: TypedContractMethod<
    [tokenIn: AddressLike, amountIn: BigNumberish, tokenOut: AddressLike],
    [bigint],
    "view"
  >;

  factory: TypedContractMethod<[], [string], "view">;

  granularity: TypedContractMethod<[], [bigint], "view">;

  observationIndexOf: TypedContractMethod<
    [timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  pairObservations: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        timestamp: bigint;
        price0Cumulative: bigint;
        price1Cumulative: bigint;
      }
    ],
    "view"
  >;

  periodSize: TypedContractMethod<[], [bigint], "view">;

  update: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [void],
    "nonpayable"
  >;

  windowSize: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "consult"
  ): TypedContractMethod<
    [tokenIn: AddressLike, amountIn: BigNumberish, tokenOut: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "granularity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "observationIndexOf"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "pairObservations"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        timestamp: bigint;
        price0Cumulative: bigint;
        price1Cumulative: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "periodSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "update"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "windowSize"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
