/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IUniswapV2Locker,
  IUniswapV2LockerInterface,
} from "../../../../contracts/memoo/interfaces/IUniswapV2Locker";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_lpToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_unlock_date",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "_referral",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_fee_in_eth",
        type: "bool",
      },
      {
        internalType: "address payable",
        name: "_withdrawer",
        type: "address",
      },
    ],
    name: "lockLPToken",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class IUniswapV2Locker__factory {
  static readonly abi = _abi;
  static createInterface(): IUniswapV2LockerInterface {
    return new Interface(_abi) as IUniswapV2LockerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IUniswapV2Locker {
    return new Contract(address, _abi, runner) as unknown as IUniswapV2Locker;
  }
}
